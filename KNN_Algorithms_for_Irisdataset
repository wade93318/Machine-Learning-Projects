import random
import csv
import math
import operator

#load Iris data from raw file
def loadData(Filename, Spilt, trainingSet, testSet):
    with open(Filename,mode='rb') as f:
        csvFile = csv.reader(f)
        dataset = list(csvFile)
        for x in range(len(dataset)):
            for y in range(0,4):
                dataset[x][y] = float(dataset[x][y])
            if random.random() < Spilt:
                trainingSet.append(dataset[x])
            else:
                testSet.append(dataset[x])

#Calcualte the distance between trainingset and testset
def CalculateDistance(list1, list2, length):
    distance = 0
    for i in range(length):
        distance += math.pow(list1[i]-list2[i],2)
    return math.sqrt(float(distance))

#def Knn Algorithms Implementation
def knnAlgorithms(trainingSet, testInstance, k):
    distance = []
    length = len(testInstance) - 1
    for i in range(len(trainingSet)):
        value = CalculateDistance(testInstance, trainingSet[i], length)
        distance.append([trainingSet[i],value])
        distance.sort(key=operator.itemgetter(1))
    neighbors = []
    for i in range(k):
        neighbors.append(distance[i][0])
    return neighbors

#find the Calculated Label
def getCalLabel(neighbors):
    classnotes = {}
    for i in range(len(neighbors)):
        response = neighbors[i][-1]
        if response in classnotes:
            classnotes[response] = classnotes[response] + 1
        else:
            classnotes[response] = 1
    l = sorted(classnotes.items(), lambda x, y: cmp(x[1], y[1]), reverse=True)
    return l[0][0]

#Calculate the accuracy of using knn algorithm to do classification
def getAccuracy(testSet, predication):
    length = len(testSet)
    num = 0
    for i in range(length):
        if testSet[i][-1] == predication[i]:
            num = num + 1
    return  (num / float(length) * 100)

def main():
    filename = '/Users/lizewei/Desktop/Killpython/Iris_Dataset.txt'
    Split = float(2)/3
    trainingSet = []
    testSet = []
    loadData(filename, Split, trainingSet, testSet)

    print len(trainingSet)
    print len(testSet)
    prediction = []
    k = 3
    for i in range(len(testSet)):
        neighbors = knnAlgorithms(trainingSet, testSet[i], k)
        prediction.append(getCalLabel(neighbors))
        print 'The Calcualted Label is :', prediction[i], 'The Actual Label is :', testSet[i][-1] + '\n'
    correct = getAccuracy(testSet, prediction)
    print 'Accuracy is:',correct

if __name__ == '__main__':
    main()

































